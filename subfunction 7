# RK resource 001 subfunction 7
# developed by Robin Karlsson
# contact email: "r.robin.karlsson@gmail.com"
# contact chess.com profile: "http://www.chess.com/members/view/RobinKarlsson"
# version 0.8

import mechanize
import csv
import urlparse
import cookielib
import re
from time import strftime, gmtime
from datetime import datetime
from bs4 import BeautifulSoup
from operator import itemgetter
from collections import OrderedDict
from collections import Counter

def allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio):
    ratinglist2 = list()
    maxratinglist2 = list()
    loginlist2 = list()
    membersinlist = list()
    timeoutlist2 = list()
    browser = mechanize.Browser()
    
    for membername in membernamelist:
        memberlink = "http://www.chess.com/members/view/" + membername
        print "\n\nChecking member: " + membername
        response = browser.open(memberlink)
        soup = BeautifulSoup(response)
        
        souprating = str(soup.find_all(class_ = "right"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souprating)
        ratinglist = ratinglister()
        for rating in ratinglist:
            if rating >= int(minrating):
                ratinglist2.append(membername)
                break

        soupmaxrating = str(soup.find_all(class_ = "right"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souprating)
        ratinglist = ratinglister()
        for rating in ratinglist:
            if rating <= int(maxrating):
                maxratinglist2.append(membername)
                break

        souplogin = str(soup.find_all(class_ = "last"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souplogin)
        loginlist = loginlister()
        if datetime(loginlist[0], loginlist[1], loginlist[2]) >= datetime(lastloginyear, lastloginmonth, lastloginday):
            loginlist2.append(membername)

        soupsince = str(soup.find_all(class_ = "columns two clearfix bottom-12"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(soupsince)
        memberslist = membersicelister()
        if datetime(memberslist[0], memberslist[1], memberslist[2]) <= datetime(membersinceyear, membersincemonth, membersinceday):
            membersinlist.append(membername)

        souptimeout = str(soup.find_all("td"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souptimeout)
        timeoutratio = timeoutlister()
        if timeoutratio <= maxtimeoutratio:
            timeoutlist2.append(membername)

    passmembers = str(set(ratinglist2) & set(loginlist2) & set(membersinlist) & set(timeoutlist2) & set(maxratinglist2))
    passmembers = passmembers.replace("set([", "")
    passmembers = passmembers.replace("])", "")
    passmembers = passmembers.replace("'", "")
    return passmembers

def step3456(choice1, set1):
    while not set1.intersection(choice1):
        choice1 = raw_input("\nStep 3. Paste the url here: ") + "&page="
        choice2 = int(raw_input("\nStep 4. Enter pagenumber to start on: "))
        choice3 = int(raw_input("\nStep 5. Enter pagenumber to end on: "))

        choice3a = choice3
        choice3 = choice3 - 1
        choice2 = choice2 - 1

        target = ""
        while choice3 > choice2:
            target = choice1 + str(choice3) + "," + target
            choice3 -= 1

        with open("temp/temp2.txt", "a") as placeholder2:
            placeholder2.write(target +  choice1 + str(choice3a))

        choice1 = raw_input("\nStep 6. Do you wish to process any additional targets? (y/n): ")
        if choice1 == "y":
            with open("temp/temp2.txt", "a") as placeholder2:
                placeholder2.write(",")
        print ""
    for target1 in csv.reader(open("temp/temp2.txt", "rb")):
        target = target1
    return target1
    
def ratinglister():
    ratinglist = list()
    ratinglist2 = list()
    for line in open("temp/temp.txt","rb"):
        if '<span class="arrow menu-icons right-arrow"></span></div>' and '<div class="right">' in line:
            line = line.replace('<span class="arrow menu-icons right-arrow"></span></div>', "")
            line = line.replace('<div class="right">', "")
            line = line.replace(",", "")
            line = line.replace('<span class="arrow menu-icons right-arrow"></span>', "")
            line = line.replace('<td>', "")
            line = line.split()
            i = 0
            while i <= len(line):
                ratinglist.append(line[-i])
                i += 1
    for rating in ratinglist[0:len(ratinglist)]:
        try:
            rating = int(rating)
        except ValueError:
            rating = 0
        ratinglist2.append(rating)
    return ratinglist2

def loginlister():
    for line in open("temp/temp.txt","rb"):
        if '        </li>, <li class="last">' in line:
            line = line.strip()
            line = line.replace('</li>, <li class="last">', "")
            line = line.replace(",", "")
            line = line.replace("Jan", "01")
            line = line.replace("Feb", "02")
            line = line.replace("Mar", "03")
            line = line.replace("Apr", "04")
            line = line.replace("May", "05")
            line = line.replace("Jun", "06")
            line = line.replace("Jul", "07")
            line = line.replace("Aug", "08")
            line = line.replace("Sep", "09")
            line = line.replace("Oct", "10")
            line = line.replace("Nov", "11")
            line = line.replace("Dec", "12")
            line = line.split()
            try:
                line = map(int, line)
            except ValueError:
                break
            loginlist = line

    try:
        loginlist[0], loginlist[2] = loginlist[2], loginlist[0]
        loginlist[1], loginlist[2] = loginlist[2], loginlist[1]
    except:
        loginlist = (1990, 01, 01)
    return loginlist

def timeoutlister():
    timeoutlist = list()
    for line in open("temp/temp.txt","rb"):
        if '<span class="no-color normal">(last 90 days)</span> </td>' in line:
            placeholder = line.index('<span class="no-color normal">(last 90 days)</span> </td>')

            placeholder2 = 0
            while placeholder2 < 6:
                timeoutlist.append(line[placeholder - placeholder2:placeholder])
                placeholder2 += 1
    try:
        timeotstr = str(timeoutlist[-1])
    except:
        timeotstr = "100"
    timeotstr = timeotstr.replace("%", "")
    timeotstr = timeotstr.replace("d", "")
    timeotstr = timeotstr.replace(">", "")
    timeoutratio = int(timeotstr)
    return timeoutratio

def membersicelister():
    for line in open("temp/temp.txt", "rb"):
        if "        </li>" in line:
            line = line.strip()
            line = line.replace("</li>", "")
            line = line.replace(",", "")
            line = line.replace("Jan", "01")
            line = line.replace("Feb", "02")
            line = line.replace("Mar", "03")
            line = line.replace("Apr", "04")
            line = line.replace("May", "05")
            line = line.replace("Jun", "06")
            line = line.replace("Jul", "07")
            line = line.replace("Aug", "08")
            line = line.replace("Sep", "09")
            line = line.replace("Oct", "10")
            line = line.replace("Nov", "11")
            line = line.replace("Dec", "12")
            line = line.split()
            line = map(int, line)
            break

    try:
        line[0], line[2] = line[2], line[0]
        line[1], line[2] = line[2], line[1]
    except:
        line = (1990, 01, 01)
        
    return line


pathway = "y"
while set(["y"]).intersection(pathway):
    flow = ""
    roadblock1 = set(["4"])

    while not roadblock1.intersection(flow):
        flow = raw_input("\nEnter your choice here: ")

        if not roadblock1.intersection(flow):
            print " invalid choice, try again!"
    if flow == "7":
        membernamelist = raw_input("\n\nList of members to check: ").replace(",", "").split()
        minrating = raw_input("\nMin rating allowed: ")
        maxrating = raw_input("Max rating allowed: ")

        lastloginyear = int(raw_input("\nLast logged in year (YYYY): "))
        lastloginmonth = int(raw_input("Last logged in month (MM): "))
        lastloginday = int(raw_input("Last logged in day (DD): "))

        membersinceyear = int(raw_input("\nMember since before year (YYYY): "))
        membersincemonth = int(raw_input("Member since before month (MM): "))
        membersinceday = int(raw_input("Member since before day (DD): "))

        maxtimeoutratio = int(raw_input("\nmaximum timeout ratio allowed: "))

        passmembers = allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio)

        choice6 = ""
        while not set(["1", "2"]).intersection(choice6):
            choice6 = raw_input("\n\nDo you wish to\n 1. Print the names of those who fill your criterias onscreen\n 2. Save them to a file\n\nEnter choice here: ")
            while not set(["1", "2"]).intersection(choice6):
                print " invalid choice, try again!"

            if choice6 == "1":
                print "\n\n" + passmembers

            if choice6 == "2":
                memfile1 = raw_input("\nName of the file to which your list will be saved: ")
                with open(memfile1, "a") as placeholder2:
                    placeholder2.write(passmembers)
                    
	pathway = raw_input("Run again? (y/n) ")
