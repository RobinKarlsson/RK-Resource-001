# RK resource 001
# developed by Robin Karlsson
# contact email: "r.robin.karlsson@gmail.com"
# contact chess.com profile: "http://www.chess.com/members/view/RobinKarlsson"
# version 0.8

import mechanize
import os
import sys
import csv
import urlparse
import cookielib
import random
import re
import time
from time import strftime, gmtime
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.alert import Alert
from bs4 import BeautifulSoup
from operator import itemgetter
from collections import OrderedDict
from collections import Counter
from string import punctuation

dommem = members
angelmem = members
#breenmem = members
#deathmem = members
#cardassiamem = members
tmban = members
domban = members

def gettmlinks(targetname):
    linklist = list()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    response = browser.open("http://www.chess.com/groups/matches/" + targetname + "?show_all_current=1")
    soup = BeautifulSoup(response)
    souplinks = re.findall("/groups/team_match(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
    for link in souplinks:
        linklist.append("http://www.chess.com" + link)

    pointerlist = (0, 1, 2)
    for pointer in pointerlist:
        del linklist[-1]

    linkarchive = linklist.pop(-1)
    pointer = 1
    while 0 == 0:
        response = browser.open(str(linkarchive) + "&page=" + str(pointer))
        soup = BeautifulSoup(response)

        soupbrake = str(soup.find_all(class_ = "next-on"))
        souplinks = re.findall("/groups/team_match(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
        for link in souplinks:
            linklist.append("http://www.chess.com" + link)

        if soupbrake == "[]":
            break
        
        pointer += 1
    
    linklist = list(OrderedDict.fromkeys(linklist))
    return linklist

def getvclinks(yourside):
    linklist = list()
    yourside = re.sub(r"[^a-z A-Z 0-9]","", yourside)
    yourside = yourside.replace(" ", "-").lower()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    pagenum = 1
    while pagenum <= 100:

        response = browser.open("http://www.chess.com/groups/votechess_diagrams/" + yourside + "/?sortby=completed&page=" + str(pagenum))
        soup = BeautifulSoup(response)
        souplinks = re.findall("/votechess/game(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
        for link in souplinks:
            linklist.append("http://www.chess.com" + link)

        soupbrake = str(soup.find_all(class_ = "next-on"))
        if soupbrake == "[]":
            break

        pagenum += 1
    
    linklist = list(OrderedDict.fromkeys(linklist))
    return linklist

def pmdriver(target):
    Username = raw_input("Username: ")
    Password = raw_input("Password: ")
    
    browser0 = webdriver.Firefox()
    browser0.get("https://www.chess.com/login")
    
    browser0.find_element_by_name("c1").send_keys(Username)
    
    browser0.find_element_by_name("loginpassword").send_keys(Password)

    WebDriverWait(browser0, 10).until(EC.presence_of_element_located((By.ID, "btnLogin")))
    browser0.find_element_by_id("btnLogin").click()
    
    logincookie = browser0.get_cookies()

    spider_checker(target, logincookie)

    browser1 = mechanize.Browser()
    cookie = cookielib.LWPCookieJar()
    browser1.set_cookiejar(cookie)
    
    for tempcookie in logincookie:
        cookie.set_cookie(cookielib.Cookie(version = 0, name = tempcookie["name"], value = tempcookie["value"], port = '80', port_specified = False, domain = tempcookie["domain"], domain_specified = True, domain_initial_dot = False, path = tempcookie["path"], path_specified = True, secure = tempcookie["secure"], expires = tempcookie["expiry"], discard = False, comment = None, comment_url = None, rest = None, rfc2109 = False))

    browser1.set_handle_equiv(True)
    browser1.set_handle_redirect(True)
    browser1.set_handle_gzip(True)
    browser1.set_handle_referer(True)
    browser1.set_handle_robots(False)
    browser1.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    memtpm = remove_doublets("temp/temp.txt", "")

    for membername in memtpm:
        membername = "http://www.chess.com/members/view/" + membername
        response = browser1.open(membername)
        soup = BeautifulSoup(response)

        for placeholder in soup.find_all(class_ = "flag"):
            country = placeholder["title"]
        if country == "International":
            country = "'let me know what to do when they havent supplied a nation of origin'"

        for placeholder in soup.find_all("strong"):
            name = placeholder.text
            break
        if name == " ":
            name = "'let me know what to do when they havent supplied a name'"

        subject = "hello " + name
        payload = "hello " + name + " of " + country + ". blablabla\n\nblablabla"
        payload2 = "\n\n some more text maybe?\n\nblabla"
        payloadimg = "http://d1lalstwiwz2br.cloudfront.net/images_users/avatars/RobinKarlsson_large.1.jpeg"

        for link in soup.find_all("a", href=True):
            if link.text == "Send a Message":
                browser0.get("http://www.chess.com" + link["href"])

        WebDriverWait(browser0, 10).until(EC.presence_of_element_located((By.ID, "c15")))
        browser0.find_element_by_name("c15").send_keys(subject)

        browser0.switch_to_frame("tinymcewindow_ifr")
        browser0.find_element_by_id("tinymce").clear()
        browser0.find_element_by_id("tinymce").send_keys(payload)
        browser0.switch_to_default_content()
            
        browser0.find_element_by_id("tinymcewindow_imageuploader").click()
        time.sleep(0)

        browser0.switch_to_window(browser0.window_handles[1])
        WebDriverWait(browser0, 10).until(EC.presence_of_element_located((By.ID, "photourl")))
        browser0.find_element_by_id("photourl").send_keys(payloadimg)
        browser0.find_element_by_id("insert").click()
        browser0.switch_to_window(browser0.window_handles[0])

        browser0.switch_to_frame("tinymcewindow_ifr")
        browser0.find_element_by_id("tinymce").send_keys(payload2)
        browser0.switch_to_default_content()
        time.sleep(2)

        browser0.find_element_by_id("c16")
        time.sleep(2)

def tmparchecker(pagelist, targetname):
    tmpar = list()
    timeoutlist = list()
    winssdic = dict()
    losedic = dict()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    for page in pagelist:
        alltmresults = list()
        counter2 = 0
        response = browser.open(page)

        soup = BeautifulSoup(response)
        
        soupgroup = str(soup.find_all(class_ = "default border-top alternate"))
        soupgroup = re.findall("/groups/home/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", soupgroup)

        souppar = soup.find_all(class_ = "align-left")
        souppar1 = soup.find_all("tr")
        souppar2 = soup.find_all("strong")

        for placeholder in souppar2:
            try:
                alltmresults.append(float(placeholder.text))
            except ValueError:
                alltmresults = alltmresults

        try:
            if targetname == str(soupgroup[0]).replace("/groups/home/", ""):
                for placeholder in souppar[0::4]:
                    placeholder = str(placeholder)
                    placeholder = re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)
                    try:
                        placeholder = str(placeholder[0]).replace("http://www.chess.com/members/view/", "")
                        tmpar.append(placeholder)
                        
                        if placeholder in winssdic:
                            winssdic[placeholder] += alltmresults[1 + counter2]
                        else:
                            winssdic[placeholder] = alltmresults[1 + counter2]

                        if placeholder in losedic:
                            losedic[placeholder] += alltmresults[2 + counter2]
                        else:
                            losedic[placeholder] = alltmresults[2 + counter2]
                        
                        counter2 += 2
                    except IndexError:
                        placeholder = list()


                for placeholder in souppar1:
                    counter = 0
                    placeholder = str(placeholder)

                    if "menu-icons timeline right-8" in placeholder:
                        timeouts = placeholder.count('class="menu-icons timeline right-8" title="Timeout"')
                        while counter < timeouts:
                            timeouters1 = str(re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)[0]).replace("http://www.chess.com/members/view/", "")
                            timeoutlist.append(timeouters1)
                            counter += 1
        

            if targetname == str(soupgroup[1]).replace("/groups/home/", ""):
                for placeholder in souppar[3::4]:
                    placeholder = str(placeholder)
                    placeholder = re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)
                    try:
                        placeholder = str(placeholder[0]).replace("http://www.chess.com/members/view/", "")
                        tmpar.append(placeholder)

                        if placeholder in winssdic:
                            winssdic[placeholder] += alltmresults[2 + counter2]
                        else:
                            winssdic[placeholder] = alltmresults[2 + counter2]

                        if placeholder in losedic:
                            losedic[placeholder] += alltmresults[1 + counter2]
                        else:
                            losedic[placeholder] = alltmresults[1 + counter2]
                            
                        counter2 += 2
                    except IndexError:
                        placeholder = list()

                for placeholder in souppar1:
                    counter = 0
                    placeholder = str(placeholder)

                    if "menu-icons timeline left-8" in placeholder:
                        timeouts = placeholder.count('class="menu-icons timeline left-8" title="Timeout"')
                        while counter < timeouts:
                            timeouters1 = str(re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)[3]).replace("http://www.chess.com/members/view/", "")
                            timeoutlist.append(timeouters1)
                            counter += 1

        except IndexError:
            placeholder = list()
    return tmpar, timeoutlist, winssdic, losedic

def step42(choice1, set1):
    while not set1.intersection(choice1):
        choice1 = raw_input("\nStep 3. Paste the url here: ")

        with open("temp/temp2.txt", "a") as placeholder2:
            placeholder2.write(choice1)

        choice1 = raw_input("\nStep 4. Do you wish to check any additional pages? (y/n): ")
        if choice1 == "y":
            with open("temp/temp2.txt", "a") as placeholder2:
                placeholder2.write(",")
        print ""
    for target1 in csv.reader(open("temp/temp2.txt", "rb")):
        target = target1
    return target1

def spider_checker(target, logincookie):
    browser1 = mechanize.Browser()
    cookie = cookielib.LWPCookieJar()
    browser1.set_cookiejar(cookie)
    
    for tempcookie in logincookie:
        cookie.set_cookie(cookielib.Cookie(version = 0, name = tempcookie["name"], value = tempcookie["value"], port = '80', port_specified = False, domain = tempcookie["domain"], domain_specified = True, domain_initial_dot = False, path = tempcookie["path"], path_specified = True, secure = tempcookie["secure"], expires = tempcookie["expiry"], discard = False, comment = None, comment_url = None, rest = None, rfc2109 = False))


    browser1.set_handle_equiv(True)
    browser1.set_handle_redirect(True)
    browser1.set_handle_gzip(True)
    browser1.set_handle_referer(True)
    browser1.set_handle_robots(False)
    browser1.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
    
    for pointer2 in target:
        browser1.open(pointer2)
        #print browser1.response().read()
        print "\nextracting names from " + pointer2
        links1 = []
        text1 = []

        for link in browser1.links():
            url2 = urlparse.urljoin(link.base_url, link.url)
            text1.append(link.text)

            links1.append("http://" + (urlparse.urlparse(url2).hostname or "") + (urlparse.urlparse(url2).path or ""))
        
        for link,text in zip(links1,text1):
            link = re.sub(r"^http?:\/\/.*[\r\n]*", "", link.replace("http://www.chess.com/members/view/", ", "), flags=re.MULTILINE)
            with open("temp/temp.txt", "a") as placeholder2:
                placeholder2.write(link)

def inviter(groupinv, choice5, infile, invitenum, payload2, invimage, invvid, invitednum):
    memint = list()
    Username = raw_input("Username: ")
    Password = raw_input("Password: ")
    
    browser2 = webdriver.Firefox()
    browser2.get("https://www.chess.com/login")
    
    browser2.find_element_by_name("c1").send_keys(Username)
    
    browser2.find_element_by_name("loginpassword").send_keys(Password)

    WebDriverWait(browser2, 10).until(EC.presence_of_element_located((By.ID, "btnLogin")))
    browser2.find_element_by_id("btnLogin").click()

    logincookie = browser2.get_cookies()
    browser1 = mechanize.Browser()
    cookie = cookielib.LWPCookieJar()
    browser1.set_cookiejar(cookie)
    
    for tempcookie in logincookie:
        cookie.set_cookie(cookielib.Cookie(version = 0, name = tempcookie["name"], value = tempcookie["value"], port = '80', port_specified = False, domain = tempcookie["domain"], domain_specified = True, domain_initial_dot = False, path = tempcookie["path"], path_specified = True, secure = tempcookie["secure"], expires = tempcookie["expiry"], discard = False, comment = None, comment_url = None, rest = None, rfc2109 = False))

    browser1.set_handle_equiv(True)
    browser1.set_handle_redirect(True)
    browser1.set_handle_gzip(True)
    browser1.set_handle_referer(True)
    browser1.set_handle_robots(False)
    browser1.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    memtinv = remove_doublets(infile, "")

    already_picked = list()
    while invitenum > len(memtinv):
        invitenum = int(raw_input("\nYou are trying to invite more members than there are in your invites list. Pick a new number of members to invite: "))

    while len(already_picked) < invitenum:
        picked = random.choice(memtinv)

        if not picked in already_picked:
            already_picked.append(picked)

    for member in already_picked:
        response = browser1.open("http://www.chess.com/members/view/" + member)
        soup = BeautifulSoup(response)

        for placeholder in soup.find_all(class_ = "flag"):
            country = placeholder["title"]
        #if country == "International":
            #country = "the great planet Terra"

        for placeholder in soup.find_all("strong"):
            name = placeholder.text
            break
        if name == " ":
            name = member

        if choice5 == "1":

        browser2.get(groupinv)

        try:
            WebDriverWait(browser2, 10).until(EC.presence_of_element_located((By.ID, "c15")))
            browser2.find_element_by_name("c15").send_keys(member)
        except:
            break

        print "\nSending invite to: " + member
        memint.append(member)

        browser2.switch_to_frame("tinymcewindow_ifr")
        browser2.find_element_by_id("tinymce").clear()
        browser2.find_element_by_id("tinymce").send_keys(payload)
        browser2.switch_to_default_content()
            
        browser2.find_element_by_id("tinymcewindow_imageuploader").click()
        time.sleep(2)

        browser2.switch_to_window(browser2.window_handles[1])
        WebDriverWait(browser2, 10).until(EC.presence_of_element_located((By.ID, "photourl")))
        browser2.find_element_by_id("photourl").send_keys(invimage)
        browser2.find_element_by_id("insert").click()
        browser2.switch_to_window(browser2.window_handles[0])

        browser2.switch_to_frame("tinymcewindow_ifr")
        browser2.find_element_by_id("tinymce").send_keys(payload2)
        browser2.switch_to_default_content()

        browser2.find_element_by_id("tinymcewindow_mce_media").click()
        time.sleep(1)

        alert = browser2.switch_to_alert()
        alert.send_keys(invvid)
        alert.accept()
        time.sleep(2)

        if set(["6"]).intersection(choice5):
            raw_input("testrun, to unlock actually sending the invites you will have to let RobinKarlsson know what message you wish to use... press enter to continue")

        if set(["1", "2", "3", "4", "5"]).intersection(choice5):
            browser2.find_element_by_id("c18").click()
                    
        invitednum += 1

    if set(["1", "2", "3", "4", "5"]).intersection(choice5):
        if invitednum > 30:
            invitednum = 30

        if choice5 == "1":


        browser2.get("http://www.chess.com/groups/forumview/invite-schedule")
        time.sleep(2)

        browser2.switch_to_frame("tinymcewindow_ifr")
        browser2.find_element_by_id("tinymce").clear()
        browser2.find_element_by_id("tinymce").send_keys(payload)
        browser2.switch_to_default_content()
        
        browser2.find_element_by_id("c27").click()
        time.sleep(1)

    browser2.quit()

    path1 = raw_input("\n\nDo you wish to remove the used names from your invites list? (y/n) ")
    if path1 == "y":
        updinvlist = set(memtinv).difference(set(memint))
        updinvlist = misc1(updinvlist)
        #print updinvlist
        with open(infile, "w") as placeholder2:
            placeholder2.write(updinvlist)

def login():
    Username = raw_input("Username: ")
    Password = raw_input("Password: ")
    
    browser0 = webdriver.Firefox()
    browser0.get("https://www.chess.com/login")
    
    browser0.find_element_by_name("c1").send_keys(Username)
    
    browser0.find_element_by_name("loginpassword").send_keys(Password)

    WebDriverWait(browser0, 10).until(EC.presence_of_element_located((By.ID, "btnLogin")))
    browser0.find_element_by_id("btnLogin").click()
    
    logincookie = browser0.get_cookies()
    browser0.quit()
    
    return logincookie

def misc1(sortedlines2):
    sortedlines2 = str(sortedlines2)
    sortedlines2 = sortedlines2.replace("'", "")
    sortedlines2 = sortedlines2.replace("set(", "")
    sortedlines2 = sortedlines2.replace(")", "")
    sortedlines2 = sortedlines2.replace("]", "")
    sortedlines2 = sortedlines2.replace("[", "")
    return sortedlines2

def remove_doublets(filename, target):
    for target in csv.reader(open(filename, "rb")):
        placeholder = target
    sortedlines = OrderedDict.fromkeys((line for line in target if line))
    sortedlines = str(sortedlines.keys())
    sortedlines = sortedlines.replace("' ", "")
    sortedlines = sortedlines.replace("'", "")
    sortedlines = sortedlines.replace(",", "")
    sortedlines = sortedlines.replace("]", "")
    sortedlines = sortedlines.replace("[", "")
    sortedlines = sortedlines.replace("  ", " ")
    sortedlines = sortedlines.split()
    return sortedlines

def vcman(vclinklist, yourside):
    
    Username = raw_input("Username: ")
    Password = raw_input("Password: ")
    
    browser3 = webdriver.Firefox()
    browser3.get("https://www.chess.com/login")
    
    browser3.find_element_by_name("c1").send_keys(Username)
    browser3.find_element_by_name("loginpassword").send_keys(Password)

    WebDriverWait(browser3, 10).until(EC.presence_of_element_located((By.ID, "btnLogin")))
    browser3.find_element_by_id("btnLogin").click()
    time.sleep(2)

    browser1 = mechanize.Browser()
    cookie = cookielib.LWPCookieJar()
    browser1.set_cookiejar(cookie)

    browser1.set_handle_equiv(True)
    browser1.set_handle_redirect(True)
    browser1.set_handle_gzip(True)
    browser1.set_handle_referer(True)
    browser1.set_handle_robots(False)
    browser1.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    logincookie = browser3.get_cookies()
    
    for tempcookie in logincookie:
        cookie.set_cookie(cookielib.Cookie(version = 0, name = tempcookie["name"], value = tempcookie["value"], port = "80", port_specified = False, domain = tempcookie["domain"], domain_specified = True, domain_initial_dot = False, path = tempcookie["path"], path_specified = True, secure = tempcookie["secure"], expires = tempcookie["expiry"], discard = False, comment = None, comment_url = None, rest = None, rfc2109 = False))


    for vcmatch in vclinklist:
        movelist = list()
        browser3.get(vcmatch)
        WebDriverWait(browser3, 10).until(EC.presence_of_element_located((By.ID, "c33")))
        browser3.find_element_by_id("c33").click()
        time.sleep(2)

        response = browser1.open(vcmatch)
        soup = BeautifulSoup(response)
        boardpos = str(re.findall("boardFlip: (?:[a-zA-Z]|(?:%[a-fA-F]))+", str(soup.find_all(class_ = "chess_viewer")))[0]).replace("boardFlip: ", "")

        yourpos = soup.find_all(class_ = "playername")
        yourpos = (str(yourpos[0]).replace('<span class="playername">', "").replace("</span>", ""), str(yourpos[1]).replace('<span class="playername">', "").replace("</span>", ""))

        vcelem = browser3.find_elements_by_partial_link_text('')

        while yourside not in yourpos:
            yoursidechoice = raw_input("\n\nCan't find your group in one of the games. Please specify which group is yours\n  1. " + yourpos[0] + "\n  2. " + yourpos[1] + "\nYour group is number: ")

            if yoursidechoice == "1":
                yourside = yourpos[0]
            if yoursidechoice == "2":
                yourside = yourpos[1]
                
        if boardpos == "false":

            if str(yourpos[0]).replace('<span class="playername">', "").replace("</span>", "") == yourside:
                for placeholder in vcelem:
                    currentvcmovlink = placeholder.get_attribute("href") or ""
                    if vcmatch + "&mv=" in currentvcmovlink:
                        movelist.append(currentvcmovlink)
                movelist = movelist[1::2]

            if str(yourpos[1]).replace('<span class="playername">', "").replace("</span>", "") == yourside:
                for placeholder in vcelem:
                    currentvcmovlink = placeholder.get_attribute("href") or ""
                    if vcmatch + "&mv=" in currentvcmovlink:
                        movelist.append(currentvcmovlink)
                movelist = movelist[0::2]

        if boardpos == "true":
            if str(yourpos[1]).replace('<span class="playername">', "").replace("</span>", "") == yourside:
                for placeholder in vcelem:
                    currentvcmovlink = placeholder.get_attribute("href") or ""
                    if vcmatch + "&mv=" in currentvcmovlink:
                        movelist.append(currentvcmovlink)
                movelist = movelist[1::2]
    
        for pointer in movelist:
            print "\nchecking " + pointer

            response = browser1.open(pointer)
            #print browser1.response().read()
            links1 = []
            text1 = []

            for link in browser1.links():
                url2 = urlparse.urljoin(link.base_url, link.url)
                text1.append(link.text)

                links1.append("http://" + (urlparse.urlparse(url2).hostname or "") + (urlparse.urlparse(url2).path or ""))
        
            for link,text in zip(links1,text1):
                with open("temp/temp.txt", "a") as placeholder2:
                    placeholder2.write(re.sub(r"^http?:\/\/.*[\r\n]*", "", link.replace("http://www.chess.com/members/view/", " "), flags=re.MULTILINE))
            
            soup = BeautifulSoup(response)
            p2 = str(soup.find_all(class_ = "next-on"))
            
            if "next-on" in p2:
                browser3.get(pointer)
                nextbtn = 2
                while not nextbtn == 0:
                
                    try:
                        browser3.find_element_by_css_selector('li.next-on>a').click()
                    except:
                        break
                    time.sleep(2)
                    print "\nextracting names from " + pointer + " page " + str(nextbtn)
                    vcelem = browser3.find_elements_by_partial_link_text('')
                    for curvcparmem in vcelem:
                        memsellink = curvcparmem.get_attribute("href") or ""

                        if "http://www.chess.com/members/view/" in memsellink:
                            with open("temp/temp.txt", "a") as placeholder2:
                                placeholder2.write(re.sub(r"^http?:\/\/.*[\r\n]*", "", memsellink.replace("http://www.chess.com/members/view/", " "), flags=re.MULTILINE))

                    nextbtn += 1
        
    browser3.quit()

def ratinglister():
    ratinglist = list()
    ratinglist2 = list()
    for line in open("temp/temp.txt","rb"):
        if '<span class="arrow menu-icons right-arrow"></span></div>' and '<div class="right">' in line:
            line = line.replace('<span class="arrow menu-icons right-arrow"></span></div>', "")
            line = line.replace('<div class="right">', "")
            line = line.replace(",", "")
            line = line.replace('<span class="arrow menu-icons right-arrow"></span>', "")
            line = line.replace('<td>', "")
            line = line.split()
            i = 0
            while i <= len(line):
                ratinglist.append(line[-i])
                i += 1
    for rating in ratinglist[0:len(ratinglist)]:
        try:
            rating = int(rating)
        except ValueError:
            rating = 0
        ratinglist2.append(rating)
    return ratinglist2

def loginlister():
    for line in open("temp/temp.txt","rb"):
        if '        </li>, <li class="last">' in line:
            line = line.strip()
            line = line.replace('</li>, <li class="last">', "")
            line = line.replace(",", "")
            line = line.replace("Jan", "01")
            line = line.replace("Feb", "02")
            line = line.replace("Mar", "03")
            line = line.replace("Apr", "04")
            line = line.replace("May", "05")
            line = line.replace("Jun", "06")
            line = line.replace("Jul", "07")
            line = line.replace("Aug", "08")
            line = line.replace("Sep", "09")
            line = line.replace("Oct", "10")
            line = line.replace("Nov", "11")
            line = line.replace("Dec", "12")
            line = line.split()
            try:
                line = map(int, line)
            except ValueError:
                break
            loginlist = line

    try:
        loginlist[0], loginlist[2] = loginlist[2], loginlist[0]
        loginlist[1], loginlist[2] = loginlist[2], loginlist[1]
    except:
        loginlist = (1990, 01, 01)
    return loginlist

def timeoutlister():
    timeoutlist = list()
    for line in open("temp/temp.txt","rb"):
        if '<span class="no-color normal">(last 90 days)</span> </td>' in line:
            placeholder = line.index('<span class="no-color normal">(last 90 days)</span> </td>')

            placeholder2 = 0
            while placeholder2 < 6:
                timeoutlist.append(line[placeholder - placeholder2:placeholder])
                placeholder2 += 1
    try:
        timeotstr = str(timeoutlist[-1])
    except:
        timeotstr = "100"
    timeotstr = timeotstr.replace("%", "")
    timeotstr = timeotstr.replace("d", "")
    timeotstr = timeotstr.replace(">", "")
    timeoutratio = int(timeotstr)
    return timeoutratio

def membersicelister():
    for line in open("temp/temp.txt", "rb"):
        if "        </li>" in line:
            line = line.strip()
            line = line.replace("</li>", "")
            line = line.replace(",", "")
            line = line.replace("Jan", "01")
            line = line.replace("Feb", "02")
            line = line.replace("Mar", "03")
            line = line.replace("Apr", "04")
            line = line.replace("May", "05")
            line = line.replace("Jun", "06")
            line = line.replace("Jul", "07")
            line = line.replace("Aug", "08")
            line = line.replace("Sep", "09")
            line = line.replace("Oct", "10")
            line = line.replace("Nov", "11")
            line = line.replace("Dec", "12")
            line = line.split()
            line = map(int, line)
            break

    try:
        line[0], line[2] = line[2], line[0]
        line[1], line[2] = line[2], line[1]
    except:
        line = (1990, 01, 01)
        
    return line

def allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio):
    ratinglist2 = list()
    maxratinglist2 = list()
    loginlist2 = list()
    membersinlist = list()
    timeoutlist2 = list()
    browser = mechanize.Browser()
    
    for membername in membernamelist:
        memberlink = "http://www.chess.com/members/view/" + membername
        print "\n\nChecking member: " + membername
        response = browser.open(memberlink)
        soup = BeautifulSoup(response)
        
        souprating = str(soup.find_all(class_ = "right"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souprating)
        ratinglist = ratinglister()
        for rating in ratinglist:
            if rating >= int(minrating):
                ratinglist2.append(membername)
                break

        soupmaxrating = str(soup.find_all(class_ = "right"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souprating)
        ratinglist = ratinglister()
        for rating in ratinglist:
            if rating <= int(maxrating):
                maxratinglist2.append(membername)
                break

        souplogin = str(soup.find_all(class_ = "last"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souplogin)
        loginlist = loginlister()
        if datetime(loginlist[0], loginlist[1], loginlist[2]) >= datetime(lastloginyear, lastloginmonth, lastloginday):
            loginlist2.append(membername)

        soupsince = str(soup.find_all(class_ = "columns two clearfix bottom-12"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(soupsince)
        memberslist = membersicelister()
        if datetime(memberslist[0], memberslist[1], memberslist[2]) <= datetime(membersinceyear, membersincemonth, membersinceday):
            membersinlist.append(membername)

        souptimeout = str(soup.find_all("td"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souptimeout)
        timeoutratio = timeoutlister()
        if timeoutratio <= maxtimeoutratio:
            timeoutlist2.append(membername)

    passmembers = str(set(ratinglist2) & set(loginlist2) & set(membersinlist) & set(timeoutlist2) & set(maxratinglist2))
    passmembers = passmembers.replace("set([", "")
    passmembers = passmembers.replace("])", "")
    passmembers = passmembers.replace("'", "")
    return passmembers

def step3456(choice1, set1):
    while not set1.intersection(choice1):
        choice1 = raw_input("\nStep 3. Paste the url here: ") + "&page="
        choice2 = int(raw_input("\nStep 4. Enter pagenumber to start on: "))
        choice3 = int(raw_input("\nStep 5. Enter pagenumber to end on: "))

        choice3a = choice3
        choice3 = choice3 - 1
        choice2 = choice2 - 1

        target = ""
        while choice3 > choice2:
            target = choice1 + str(choice3) + "," + target
            choice3 -= 1

        with open("temp/temp2.txt", "a") as placeholder2:
            placeholder2.write(target +  choice1 + str(choice3a))

        choice1 = raw_input("\nStep 6. Do you wish to process any additional targets? (y/n): ")
        if choice1 == "y":
            with open("temp/temp2.txt", "a") as placeholder2:
                placeholder2.write(",")
        print ""
    for target1 in csv.reader(open("temp/temp2.txt", "rb")):
        target = target1
    return target1

def spider_ml(target, logincookie):
    browser1 = mechanize.Browser()
    cookie = cookielib.LWPCookieJar()
    browser1.set_cookiejar(cookie)
    
    for tempcookie in logincookie:
        cookie.set_cookie(cookielib.Cookie(version = 0, name = tempcookie["name"], value = tempcookie["value"], port = "80", port_specified = False, domain = tempcookie["domain"], domain_specified = True, domain_initial_dot = False, path = tempcookie["path"], path_specified = True, secure = tempcookie["secure"], expires = tempcookie["expiry"], discard = False, comment = None, comment_url = None, rest = None, rfc2109 = False))


    browser1.set_handle_equiv(True)
    browser1.set_handle_redirect(True)
    browser1.set_handle_gzip(True)
    browser1.set_handle_referer(True)
    browser1.set_handle_robots(False)
    browser1.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
    
    print "\nworking\n"
    for pointer in target:
        print "\nextracting names from" + pointer
        browser1.open(pointer)
        #print browser1.response().read()
        links1 = []
        text1 = []

        for link in browser1.links():
            url2 = urlparse.urljoin(link.base_url, link.url)
            text1.append(link.text)

            links1.append("http://" + (urlparse.urlparse(url2).hostname or "") + (urlparse.urlparse(url2).path or ""))
        
        for link,text in zip(links1,text1):
            with open("temp/temp.txt", "a") as placeholder2:
                placeholder2.write(re.sub(r"^http?:\/\/.*[\r\n]*", "", link.replace("http://www.chess.com/members/view/", ", "), flags=re.MULTILINE))

pathway = "y"
while set(["y"]).intersection(pathway):

    with open("temp/temp.txt", "w") as placeholder2:
        print "chess.com RK Resource 001\nversion 0.8\ndeveloped by Robin Karlsson\ncontact email: 'r.robin.karlsson@gmail.com'\ncontact chess.com profile: 'http://www.chess.com/members/view/RobinKarlsson'\n"
    with open("temp/temp2.txt", "w") as placeholder2:
        print "What would you like to do?\n\n 1. Create a list of members from a group.\n 2. Check a team match for members banned from matches by the Dominion.\n 3. Extract members from a set of specific pages.\n 4. Send invites for a group.\n 5. Check a groups finished votechess matches and count number of posts per member\n 6. Check a groups team matches and count the number of times each member has participated.\n 7. Check a list of members for those with a rating above and/or below a specific value, last online & member since a specific date and a timeout ratio below a specific value.\n 8. Remove doublets from a preexisting textfile.\n 9. Remove doublets, Dominion members and unwanted members from a preexisting textfile."

    flow = ""
    roadblock1 = set(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])

    while not roadblock1.intersection(flow):
        flow = raw_input("\nEnter your choice here: ")

        if not roadblock1.intersection(flow):
            print " invalid choice, try again!"

    if flow == "1":
        print "\n\n\nchess.com members list extractor\n"
        print "Step 1. Locate the members list url of the group you wish to target.\n\n  example: http://www.chess.com/groups/membersearch?allnew=1&id=8893\n\nStep 2. Copy the url.\n"
        target = step3456("", set(["n"]))

        logincookie = login()
    
        spider_ml(target, logincookie)
        un1 = set(remove_doublets("temp/temp.txt", ""))
        
        un1 = un1.difference(dommem)
        un1 = un1.difference(angelmem)
        #un1 = un1.symmetric_difference(dommem)
        #un1 = un1.difference(breenmem)
        #un1 = un1.difference(deathmem)
        #un1 = un1.difference(cardassiamem)
        
        un1 = un1.difference(domban)
        un1 = un1.difference(tmban)
        un1 = misc1(un1)

        

        choice6 = ""

        while not set(["1", "2"]).intersection(choice6):
            choice6 = raw_input("\n\nDo you wish to\n 1. Print the extracted names onscreen\n 2. Save them to a file\n\nEnter choice here: ")
            if not set(["1", "2"]).intersection(choice6):
                print " invalid choice, try again!"

            if choice6 == "1":
                print "\n\n" + un1

            if choice6 == "2":
                memfile1 = raw_input("\nStep 7. Name of the file to which your list will be saved: ")
                with open(memfile1, "a") as placeholder2:
                    placeholder2.write(un1)
    
        print "\n\n\nThank you for using the chess.com members list extractor. We wish you a continued pleasant day and hope the script worked to your satisfaction.\n"

    if flow == "2":
        print "\n\n\nchess.com checker\n"
        print "This little script looks through a team match for members who has been banned from tm's by the Dominion\n\nStep1. Locate the team match's url.\nStep2. Copy the url."
        target = step42("", set(["n"]))

        logincookie = login()

        spider_checker(target, logincookie)
        un2 = set(remove_doublets("temp/temp.txt", ""))
    
        un2 = un2.intersection(tmban)
        un2 = misc1(un2)
        print "\n\nThe following members banned from team matches was found in this match: " + un2 + "\n\n\nThank you for using the chess.com checker. We wish you a continued pleasant day and hope the script worked to your satisfaction.\n"

    if flow == "3":
        print "\n\n\nchess.com checker2\n"
        print "Extract members from a set of pages, for example notes or team matches\n\nStep1. Locate page url.\nStep2. Copy the url."
        target = step42("", set(["n"]))

        logincookie = login()

        spider_checker(target, logincookie)
        un3 = set(remove_doublets("temp/temp.txt", ""))
    
        un3 = un3.difference(dommem)
        un3 = un3.difference(domban)
        un3 = un3.difference(tmban)
        un3 = misc1(un3)
        print "\n\n" + un3 + "\n\n\nThank you for using the chess.com checker2. We wish you a continued pleasant day and hope the script worked to your satisfaction.\n"

    if flow == "4":
        choice5 = raw_input("\n\nWhich group would you like to send invites for?\n\n    Dominion affiliated groups:\n 1. Star Trek: The Dominion\n 2. Karemma Commerce Ministry\n 3. The Breen Confederacy\n 4. The Cardassian Empire\n 5. Death Star III\n\n    Non Dominion groups:\n 6. Space Angels\n\nEnter choice here: ")

        if choice5 == "1":

        inviter(groupinv, choice5, infile, invitenum, payload2, invimage, invvid, 0)
            

    if flow == "5":
        yourside = raw_input("Name of group to check: ")

        vclinklist = getvclinks(yourside)
        vcman(vclinklist, yourside)

        parmemvc = Counter()

        for placeholder2 in open ("temp/temp.txt", "r"):
          for membervc in placeholder2.split ():
            parmemvc[membervc] += 0.5

        for key, value in sorted(parmemvc.items(), key = itemgetter(1), reverse = True):
            print "\n" + key + " has made " + str(int(value)) + " posts"

    if flow == "6":
        targetnameorg = raw_input("\n\n\nName of the group you wish to check: ")
        targetname = re.sub(r"[^a-z A-Z 0-9]","", targetnameorg)
        targetname = targetname.replace(" ", "-").lower()
        #if targetname == "star-trek-the-dominion" or targetname == "space-angels-dancing-the-christmas-waltz-in-the-andromeda-galaxys-tree-of-infinite-stars":
        #    targetname = "the-power-of-chess"

        pagelist = gettmlinks(targetname)
        tmpar, tmtimeout, winssdic, losedic = tmparchecker(pagelist, targetname)

        tmparcount = Counter(tmpar)
        tmtimeoutcount = Counter(tmtimeout)
        joined = {}
        membernamelist = list()

        outputfile = open(targetnameorg + ".csv", "wb")
        csvwriter = csv.writer(outputfile, delimiter = " ", quoting=csv.QUOTE_MINIMAL)
        
        choicetm = raw_input("\n\nWould you wish to\n\n 1. Print the collected infomation\n\n 2. Remove those who hasn't been online in a while or have an overall high timeout ratio and print\n\nChooce your path wisely, young padawan: ")

        for pointer in set(tmparcount.keys())|set(winssdic.keys())|set(losedic.keys())|set(tmtimeoutcount.keys()):
            
            joined[pointer] = (float(tmparcount.get(pointer, 0))/10 + (float(tmparcount.get(pointer, 0))*2 - float(winssdic.get(pointer, 0)) - float(losedic.get(pointer, 0)))*5/4 + float(winssdic.get(pointer, 0)) - float(losedic.get(pointer, 0)) - tmtimeoutcount.get(pointer, 0)*3, tmparcount.get(pointer, 0), winssdic.get(pointer, 0), losedic.get(pointer, 0), tmtimeoutcount.get(pointer, 0))

        if choicetm == "1":
            csvwriter.writerow(("Member name", "tm's participated in", "points won", "points lost", "ongoing games", "timeouts"))
            
            for key, value in sorted(joined.items(), key = itemgetter(1), reverse = True):

                print "\n" + key + " has played in " + str(value[1]) + " team matches, and timed out in " + str(value[4]) + " games\npoints won: " + str(value[2]).replace(".0", "") + ", points lost: " + str(value[3]).replace(".0", "") + ", ongoing games: " + str(value[1]*2 - value[2] - value[3]).replace(".0", "")
                csvwriter.writerow((key, value[1], value[2], value[3], value[1]*2 - value[2] - value[3], value[4]))

            choicetm = raw_input("continue to remove those who dosn't fill your requirements? (y/n) ")
            if choicetm == "y":
                choicetm = "2"
        
        if choicetm == "2":
            minrating = raw_input("\nMin rating allowed: ")
            maxrating = raw_input("Max rating allowed: ")
            membernamelist = list()
            for key in joined:
                membernamelist.append(key)

            print "\n\nNumber of members that will be checked: " + str(len(membernamelist))
            lastloginyear = int(raw_input("\nLast logged in year (YYYY): "))
            lastloginmonth = int(raw_input("Last logged in month (MM): "))
            lastloginday = int(raw_input("Last logged in day (DD): "))

            membersinceyear = int(raw_input("\nMember since before year (YYYY): "))
            membersincemonth = int(raw_input("Member since before month (MM): "))
            membersinceday = int(raw_input("Member since before day (DD): "))

            maxtimeoutratio = int(raw_input("\nmaximum timeout ratio allowed: "))

            passmembers = allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio)
            joined2 = dict()
            membernamelist = list()
            for key in joined:
                if key in passmembers:
                    joined2[key] = joined[key]
                    
            csvwriter.writerow(("Member name (those who fill your requirements)", "tm's participated in", "points won", "points lost", "ongoing games", "timeouts"))
            
            for key, value in sorted(joined2.items(), key = itemgetter(1), reverse = True):

                print "\n" + key + " has played in " + str(value[1]) + " team matches, and timed out in " + str(value[4]) + " games\npoints won: " + str(value[2]).replace(".0", "") + ", points lost: " + str(value[3]).replace(".0", "") + ", ongoing games: " + str(value[1]*2 - value[2] - value[3]).replace(".0", "")
                csvwriter.writerow((key, value[1], value[2], value[3], value[1]*2 - value[2] - value[3], value[4]))
                membernamelist.append(key)

            choicetmp = raw_input("\n\n\nPrint the above names in an invite friendly format (name1, name2, name3, ...)? (y/n)")

            if choicetmp == "y":
                membernamelist = str(membernamelist).replace("'", "")
                membernamelist = membernamelist.replace("]", "")
                membernamelist = membernamelist.replace("[", "")
                print membernamelist

        outputfile.close()

    if flow == "7":
        membernamelist = raw_input("\n\nList of members to check: ").replace(",", "").split()
        minrating = raw_input("\nMin rating allowed: ")
        maxrating = raw_input("Max rating allowed: ")

        lastloginyear = int(raw_input("\nLast logged in year (YYYY): "))
        lastloginmonth = int(raw_input("Last logged in month (MM): "))
        lastloginday = int(raw_input("Last logged in day (DD): "))

        membersinceyear = int(raw_input("\nMember since before year (YYYY): "))
        membersincemonth = int(raw_input("Member since before month (MM): "))
        membersinceday = int(raw_input("Member since before day (DD): "))

        maxtimeoutratio = int(raw_input("\nmaximum timeout ratio allowed: "))

        passmembers = allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio)

        choice6 = ""
        while not set(["1", "2"]).intersection(choice6):
            choice6 = raw_input("\n\nDo you wish to\n 1. Print the names of those who fill your criterias onscreen\n 2. Save them to a file\n\nEnter choice here: ")
            while not set(["1", "2"]).intersection(choice6):
                print " invalid choice, try again!"

            if choice6 == "1":
                print "\n\n" + passmembers

            if choice6 == "2":
                memfile1 = raw_input("\nName of the file to which your list will be saved: ")
                with open(memfile1, "a") as placeholder2:
                    placeholder2.write(passmembers)
                
    if flow == "8":
        print "\n\n\nRemoves doublets from your list"
        preexlist = raw_input("\nFull name of the file containing your list: ")
    
        un3 = set(remove_doublets(preexlist, ""))
        un3 = misc1(un3)

        with open(preexlist, "w") as placeholder2:
            placeholder2.write(un3)

        print "\n\n\nDone. We wish you a continued pleasant day and hope the script worked to your satisfaction.\n"

    if flow == "9":
        print "\n\n\nRemoves doublets and unwanted elements from your list (ie those who are either already members or banned/unwanted)"
        preexlist1 = raw_input("\nFull name of the file containing your list: ")
        un4 = set(remove_doublets(preexlist1, ""))

        un4 = un4.difference(dommem)
        un4 = un4.difference(angelmem)
        un4 = un4.difference(domban)
        un4 = misc1(un4)

        with open(preexlist1, "w") as placeholder2:
            placeholder2.write(un4)

        print "\n\n\nDone. We wish you a continued pleasant day and hope the script worked to your satisfaction.\n"

    if flow == "10":
        target = step42("", set(["n"]))
        pmdriver(target)
    
    pathway = raw_input("\n\n\nRun again? (y/n) ")

os.remove("temp/temp.txt")
os.remove("temp/temp2.txt")
