# RK resource 001 subfunction 6
# developed by Robin Karlsson
# contact email: "r.robin.karlsson@gmail.com"
# contact chess.com profile: "http://www.chess.com/members/view/RobinKarlsson"
# version 0.8.5

import mechanize
import re
import csv
from collections import OrderedDict
from bs4 import BeautifulSoup
from collections import Counter

def gettmlinks(targetname):
    linklist = list()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    response = browser.open("http://www.chess.com/groups/matches/" + targetname + "?show_all_current=1")
    soup = BeautifulSoup(response)
    souplinks = re.findall("/groups/team_match(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
    for link in souplinks:
        linklist.append("http://www.chess.com" + link)

    pointerlist = (0, 1, 2)
    for pointer in pointerlist:
        del linklist[-1]

    linkarchive = linklist.pop(-1)
    pointer = 1
    while 0 == 0:
        response = browser.open(str(linkarchive) + "&page=" + str(pointer))
        soup = BeautifulSoup(response)

        soupbrake = str(soup.find_all(class_ = "next-on"))
        souplinks = re.findall("/groups/team_match(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]i|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
        for link in souplinks:
            linklist.append("http://www.chess.com" + link)

        if soupbrake == "[]":
            break
        
        pointer += 1
    
    linklist = list(OrderedDict.fromkeys(linklist))
    return linklist
    
def tmparchecker(pagelist, targetname):
    tmpar = list()
    timeoutlist = list()
    winssdic = dict()
    losedic = dict()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    for page in pagelist:
        alltmresults = list()
        counter2 = 0
        response = browser.open(page)

        soup = BeautifulSoup(response)
        
        soupgroup = str(soup.find_all(class_ = "default border-top alternate"))
        soupgroup = re.findall("/groups/home/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", soupgroup)

        souppar = soup.find_all(class_ = "align-left")
        souppar1 = soup.find_all("tr")
        souppar2 = soup.find_all("strong")

        for placeholder in souppar2:
            try:
                alltmresults.append(float(placeholder.text))
            except ValueError:
                alltmresults = alltmresults

        try:
            if targetname == str(soupgroup[0]).replace("/groups/home/", ""):
                for placeholder in souppar[0::4]:
                    placeholder = str(placeholder)
                    placeholder = re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)
                    try:
                        placeholder = str(placeholder[0]).replace("http://www.chess.com/members/view/", "")
                        tmpar.append(placeholder)
                        
                        if placeholder in winssdic:
                            winssdic[placeholder] += alltmresults[1 + counter2]
                        else:
                            winssdic[placeholder] = alltmresults[1 + counter2]

                        if placeholder in losedic:
                            losedic[placeholder] += alltmresults[2 + counter2]
                        else:
                            losedic[placeholder] = alltmresults[2 + counter2]
                        
                        counter2 += 2
                    except IndexError:
                        placeholder = list()


                for placeholder in souppar1:
                    counter = 0
                    placeholder = str(placeholder)

                    if "menu-icons timeline right-8" in placeholder:
                        timeouts = placeholder.count('class="menu-icons timeline right-8" title="Timeout"')
                        while counter < timeouts:
                            timeouters1 = str(re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)[0]).replace("http://www.chess.com/members/view/", "")
                            timeoutlist.append(timeouters1)
                            counter += 1
        

            if targetname == str(soupgroup[1]).replace("/groups/home/", ""):
                for placeholder in souppar[3::4]:
                    placeholder = str(placeholder)
                    placeholder = re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)
                    try:
                        placeholder = str(placeholder[0]).replace("http://www.chess.com/members/view/", "")
                        tmpar.append(placeholder)

                        if placeholder in winssdic:
                            winssdic[placeholder] += alltmresults[2 + counter2]
                        else:
                            winssdic[placeholder] = alltmresults[2 + counter2]

                        if placeholder in losedic:
                            losedic[placeholder] += alltmresults[1 + counter2]
                        else:
                            losedic[placeholder] = alltmresults[1 + counter2]
                            
                        counter2 += 2
                    except IndexError:
                        placeholder = list()

                for placeholder in souppar1:
                    counter = 0
                    placeholder = str(placeholder)

                    if "menu-icons timeline left-8" in placeholder:
                        timeouts = placeholder.count('class="menu-icons timeline left-8" title="Timeout"')
                        while counter < timeouts:
                            timeouters1 = str(re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)[3]).replace("http://www.chess.com/members/view/", "")
                            timeoutlist.append(timeouters1)
                            counter += 1

        except IndexError:
            placeholder = list()
    return tmpar, timeoutlist, winssdic, losedic

def ratinglister():
    ratinglist = list()
    ratinglist2 = list()
    for line in open("temp/temp.txt","rb"):
        if '<span class="arrow menu-icons right-arrow"></span></div>' and '<div class="right">' in line:
            line = line.replace('<span class="arrow menu-icons right-arrow"></span></div>', "").replace('<div class="right">', "").replace(",", "").replace('<span class="arrow menu-icons right-arrow"></span>', "").replace('<td>', "")
            line = line.split()
            i = 0
            while i <= len(line):
                ratinglist.append(line[-i])
                i += 1
    for rating in ratinglist[0:len(ratinglist)]:
        try:
            rating = int(rating)
        except ValueError:
            rating = 0
        ratinglist2.append(rating)
    return ratinglist2

def loginlister():
    for line in open("temp/temp.txt","rb"):
        if '        </li>, <li class="last">' in line:
            line = line.strip()
            line = line.replace('</li>, <li class="last">', "").replace(",", "").replace("Jan", "01").replace("Feb", "02").replace("Mar", "03").replace("Apr", "04").replace("May", "05").replace("Jun", "06").replace("Jul", "07").replace("Aug", "08").replace("Sep", "09").replace("Oct", "10").replace("Nov", "11").replace("Dec", "12")
            line = line.split()
            try:
                line = map(int, line)
            except ValueError:
                break
            loginlist = line

    try:
        loginlist[0], loginlist[2] = loginlist[2], loginlist[0]
        loginlist[1], loginlist[2] = loginlist[2], loginlist[1]
    except:
        loginlist = (1990, 01, 01)
    return loginlist

def timeoutlister():
    timeoutlist = list()
    for line in open("temp/temp.txt","rb"):
        if '<span class="no-color normal">(last 90 days)</span> </td>' in line:
            placeholder = line.index('<span class="no-color normal">(last 90 days)</span> </td>')

            placeholder2 = 0
            while placeholder2 < 6:
                timeoutlist.append(line[placeholder - placeholder2:placeholder])
                placeholder2 += 1
    try:
        timeotstr = str(timeoutlist[-1])
    except:
        timeotstr = "100"
    timeotstr = timeotstr.replace("%", "").replace("d", "").replace(">", "")
    timeoutratio = int(timeotstr)
    return timeoutratio

def membersicelister():
    for line in open("temp/temp.txt", "rb"):
        if "        </li>" in line:
            line = line.strip()
            line = line.replace("</li>", "").replace(",", "").replace("Jan", "01").replace("Feb", "02").replace("Mar", "03").replace("Apr", "04").replace("May", "05").replace("Jun", "06").replace("Jul", "07").replace("Aug", "08").replace("Sep", "09").replace("Oct", "10").replace("Nov", "11").replace("Dec", "12")
            line = line.split()
            line = map(int, line)
            break

    try:
        line[0], line[2] = line[2], line[0]
        line[1], line[2] = line[2], line[1]
    except:
        line = (1990, 01, 01)
        
    return line

def allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio):
    ratinglist2 = list()
    maxratinglist2 = list()
    loginlist2 = list()
    membersinlist = list()
    timeoutlist2 = list()
    browser = mechanize.Browser()
    
    for membername in membernamelist:
        memberlink = "http://www.chess.com/members/view/" + membername
        print "\n\nChecking member: " + membername
        response = browser.open(memberlink)
        soup = BeautifulSoup(response)
        
        souprating = str(soup.find_all(class_ = "right"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souprating)
        ratinglist = ratinglister()
        for rating in ratinglist:
            if rating >= int(minrating):
                ratinglist2.append(membername)
                break

        soupmaxrating = str(soup.find_all(class_ = "right"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souprating)
        ratinglist = ratinglister()
        for rating in ratinglist:
            if rating <= int(maxrating):
                maxratinglist2.append(membername)
                break

        souplogin = str(soup.find_all(class_ = "last"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souplogin)
        loginlist = loginlister()
        if datetime(loginlist[0], loginlist[1], loginlist[2]) >= datetime(lastloginyear, lastloginmonth, lastloginday):
            loginlist2.append(membername)

        soupsince = str(soup.find_all(class_ = "columns two clearfix bottom-12"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(soupsince)
        memberslist = membersicelister()
        if datetime(memberslist[0], memberslist[1], memberslist[2]) <= datetime(membersinceyear, membersincemonth, membersinceday):
            membersinlist.append(membername)

        souptimeout = str(soup.find_all("td"))
        with open("temp/temp.txt", "w") as placeholder2:
            placeholder2.write(souptimeout)
        timeoutratio = timeoutlister()
        if timeoutratio <= maxtimeoutratio:
            timeoutlist2.append(membername)

    passmembers = str(set(ratinglist2) & set(loginlist2) & set(membersinlist) & set(timeoutlist2) & set(maxratinglist2)).replace("set([", "").replace("])", "").replace("'", "")
    return passmembers    

pathway = "y"
while pathway in (["y"]):
    flow = ""

    while flow not in (["6"]):
        flow = raw_input("\nEnter your choice here: ")
            
    if flow == "6":
        targetnameorg = raw_input("\n\n\nName of the group you wish to check: ")
        targetname = re.sub(r"[^a-z A-Z 0-9]","", targetnameorg)
        targetname = targetname.replace(" ", "-").lower()

        pagelist = gettmlinks(targetname)
        tmpar, tmtimeout, winssdic, losedic = tmparchecker(pagelist, targetname)

        tmparcount = Counter(tmpar)
        tmtimeoutcount = Counter(tmtimeout)
        joined = {}
        membernamelist = list()

        outputfile = open(targetnameorg + ".csv", "wb")
        csvwriter = csv.writer(outputfile, delimiter = " ", quoting=csv.QUOTE_MINIMAL)
        
        choicetm = raw_input("\n\nWould you wish to\n\n 1. Print the collected infomation\n\n 2. Remove those who hasn't been online in a while or have an overall high timeout ratio and print\n\nChooce your path wisely, young padawan: ")

        for pointer in set(tmparcount.keys())|set(winssdic.keys())|set(losedic.keys())|set(tmtimeoutcount.keys()):
            
            joined[pointer] = (float(tmparcount.get(pointer, 0))/10 + (float(tmparcount.get(pointer, 0))*2 - float(winssdic.get(pointer, 0)) - float(losedic.get(pointer, 0)))*5/4 + float(winssdic.get(pointer, 0)) - float(losedic.get(pointer, 0)) - tmtimeoutcount.get(pointer, 0)*3, tmparcount.get(pointer, 0), winssdic.get(pointer, 0), losedic.get(pointer, 0), tmtimeoutcount.get(pointer, 0))

        if choicetm == "1":
            csvwriter.writerow(("Member name", "tm's participated in", "points won", "points lost", "ongoing games", "timeouts"))
            
            for key, value in sorted(joined.items(), key = itemgetter(1), reverse = True):

                print "\n" + key + " has played in " + str(value[1]) + " team matches, and timed out in " + str(value[4]) + " games\npoints won: " + str(value[2]).replace(".0", "") + ", points lost: " + str(value[3]).replace(".0", "") + ", ongoing games: " + str(value[1]*2 - value[2] - value[3]).replace(".0", "")
                csvwriter.writerow((key, value[1], value[2], value[3], value[1]*2 - value[2] - value[3], value[4]))

            choicetm = raw_input("continue to remove those who dosn't fill your requirements? (y/n) ")
            if choicetm == "y":
                choicetm = "2"
        
        if choicetm == "2":
            minrating = raw_input("\nMin rating allowed: ")
            maxrating = raw_input("Max rating allowed: ")
            membernamelist = list()
            for key in joined:
                membernamelist.append(key)

            print "\n\nNumber of members that will be checked: " + str(len(membernamelist))
            lastloginyear = int(raw_input("\nLast logged in year (YYYY): "))
            lastloginmonth = int(raw_input("Last logged in month (MM): "))
            lastloginday = int(raw_input("Last logged in day (DD): "))

            membersinceyear = int(raw_input("\nMember since before year (YYYY): "))
            membersincemonth = int(raw_input("Member since before month (MM): "))
            membersinceday = int(raw_input("Member since before day (DD): "))

            maxtimeoutratio = int(raw_input("\nmaximum timeout ratio allowed: "))

            passmembers = allinone(membernamelist, minrating, maxrating, lastloginyear, lastloginmonth, lastloginday, membersinceyear, membersincemonth, membersinceday, maxtimeoutratio)
            joined2 = dict()
            membernamelist = list()
            for key in joined:
                if key in passmembers:
                    joined2[key] = joined[key]
                    
            csvwriter.writerow(("Member name (those who fill your requirements)", "tm's participated in", "points won", "points lost", "ongoing games", "timeouts"))
            
            for key, value in sorted(joined2.items(), key = itemgetter(1), reverse = True):

                print "\n" + key + " has played in " + str(value[1]) + " team matches, and timed out in " + str(value[4]) + " games\npoints won: " + str(value[2]).replace(".0", "") + ", points lost: " + str(value[3]).replace(".0", "") + ", ongoing games: " + str(value[1]*2 - value[2] - value[3]).replace(".0", "")
                csvwriter.writerow((key, value[1], value[2], value[3], value[1]*2 - value[2] - value[3], value[4]))

        outputfile.close()
        
  pathway = raw_input("Run again? (y/n) ")
