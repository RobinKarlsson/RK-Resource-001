# RK resource 001 subfunction 6
# developed by Robin Karlsson
# contact email: "r.robin.karlsson@gmail.com"
# contact chess.com profile: "http://www.chess.com/members/view/RobinKarlsson"
# version 0.8.5

import mechanize
import re
import csv
from collections import OrderedDict
from bs4 import BeautifulSoup
from collections import Counter

def gettmlinks(targetname):
    linklist = list()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    response = browser.open("http://www.chess.com/groups/matches/" + targetname + "?show_all_current=1")
    soup = BeautifulSoup(response)
    souplinks = re.findall("/groups/team_match(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
    for link in souplinks:
        linklist.append("http://www.chess.com" + link)

    pointerlist = (0, 1, 2)
    for pointer in pointerlist:
        del linklist[-1]

    linkarchive = linklist.pop(-1)
    pointer = 1
    while 0 == 0:
        response = browser.open(str(linkarchive) + "&page=" + str(pointer))
        soup = BeautifulSoup(response)

        soupbrake = str(soup.find_all(class_ = "next-on"))
        souplinks = re.findall("/groups/team_match(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]i|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(soup.find_all("a")))
        for link in souplinks:
            linklist.append("http://www.chess.com" + link)

        if soupbrake == "[]":
            break
        
        pointer += 1
    
    linklist = list(OrderedDict.fromkeys(linklist))
    return linklist
    
def tmparchecker(pagelist, targetname):
    tmpar = list()
    timeoutlist = list()
    winssdic = dict()
    losedic = dict()
    browser = mechanize.Browser()

    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    for page in pagelist:
        alltmresults = list()
        counter2 = 0
        response = browser.open(page)

        soup = BeautifulSoup(response)
        
        soupgroup = str(soup.find_all(class_ = "default border-top alternate"))
        soupgroup = re.findall("/groups/home/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", soupgroup)

        souppar = soup.find_all(class_ = "align-left")
        souppar1 = soup.find_all("tr")
        souppar2 = soup.find_all("strong")

        for placeholder in souppar2:
            try:
                alltmresults.append(float(placeholder.text))
            except ValueError:
                alltmresults = alltmresults

        try:
            if targetname == str(soupgroup[0]).replace("/groups/home/", ""):
                for placeholder in souppar[0::4]:
                    placeholder = str(placeholder)
                    placeholder = re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)
                    try:
                        placeholder = str(placeholder[0]).replace("http://www.chess.com/members/view/", "")
                        tmpar.append(placeholder)
                        
                        if placeholder in winssdic:
                            winssdic[placeholder] += alltmresults[1 + counter2]
                        else:
                            winssdic[placeholder] = alltmresults[1 + counter2]

                        if placeholder in losedic:
                            losedic[placeholder] += alltmresults[2 + counter2]
                        else:
                            losedic[placeholder] = alltmresults[2 + counter2]
                        
                        counter2 += 2
                    except IndexError:
                        placeholder = list()


                for placeholder in souppar1:
                    counter = 0
                    placeholder = str(placeholder)

                    if "menu-icons timeline right-8" in placeholder:
                        timeouts = placeholder.count('class="menu-icons timeline right-8" title="Timeout"')
                        while counter < timeouts:
                            timeouters1 = str(re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)[0]).replace("http://www.chess.com/members/view/", "")
                            timeoutlist.append(timeouters1)
                            counter += 1
        

            if targetname == str(soupgroup[1]).replace("/groups/home/", ""):
                for placeholder in souppar[3::4]:
                    placeholder = str(placeholder)
                    placeholder = re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)
                    try:
                        placeholder = str(placeholder[0]).replace("http://www.chess.com/members/view/", "")
                        tmpar.append(placeholder)

                        if placeholder in winssdic:
                            winssdic[placeholder] += alltmresults[2 + counter2]
                        else:
                            winssdic[placeholder] = alltmresults[2 + counter2]

                        if placeholder in losedic:
                            losedic[placeholder] += alltmresults[1 + counter2]
                        else:
                            losedic[placeholder] = alltmresults[1 + counter2]
                            
                        counter2 += 2
                    except IndexError:
                        placeholder = list()

                for placeholder in souppar1:
                    counter = 0
                    placeholder = str(placeholder)

                    if "menu-icons timeline left-8" in placeholder:
                        timeouts = placeholder.count('class="menu-icons timeline left-8" title="Timeout"')
                        while counter < timeouts:
                            timeouters1 = str(re.findall("http://www.chess.com/members/view/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", placeholder)[3]).replace("http://www.chess.com/members/view/", "")
                            timeoutlist.append(timeouters1)
                            counter += 1

        except IndexError:
            placeholder = list()
    return tmpar, timeoutlist, winssdic, losedic

def memberprocesser(target):
    minrat = raw_input("\n\nMin (online chess) rating allowed. leave empty to skip: ")
    maxrat = raw_input("\n\Max (online chess) rating allowed. leave empty to skip: ")

    lastloginyear = raw_input("\nLast logged in year. leave empty to skip (YYYY): ")
    if lastloginyear != "":
        lastloginyear = int(lastloginyear)
        lastloginmonth = int(raw_input("Last logged in month (MM): "))
        lastloginday = int(raw_input("Last logged in day (DD): "))
    
    membersinceyear = raw_input("\nMember since before year. leave empty to skip (YYYY): ")
    if membersinceyear!= "":
        membersinceyear = int(membersinceyear)
        membersincemonth = int(raw_input("Member since before month (MM): "))
        membersinceday = int(raw_input("Member since before day (DD): "))

    youngeryear = raw_input("\nBorn after year. leave empty to skip (YYYY): ")
    if youngeryear!= "":
        youngeryear = int(youngeryear)
        youngermonth = int(raw_input("Born after month (MM): "))
        youngerday = int(raw_input("Born after day (DD): "))
        
    olderyear = raw_input("\nBorn before year. leave empty to skip (YYYY): ")
    if olderyear!= "":
        olderyear = int(olderyear)
        oldermonth = int(raw_input("Born before month (MM): "))
        olderday = int(raw_input("Born before day (DD): "))

    timemax = raw_input("\nMax timeoutratio allowed. leave empty to skip: ")
    maxgroup = raw_input("\nMax number of groups member may be in. leave empty to skip: ")
    mingroup = raw_input("Min number of groups member may be in. leave empty to skip: ")

    heritage = raw_input("\nMember should be from. leave empty to skip: ")

    memgender = "a"
    while memgender not in (["m", "f", ""]):
        memgender = raw_input("\nMember should be gender (determined by comparing member name to a list of male and female names). leave empty to skip (m/f): ")

    browser = mechanize.Browser()
    browser.set_handle_equiv(True)
    browser.set_handle_redirect(True)
    browser.set_handle_gzip(True)
    browser.set_handle_referer(True)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
    
    target = target.replace(" ", "").split(",")
    passmem = list()
    for targetx in target:
        print "checking " + targetx
        response = browser.open("http://www.chess.com/members/view/" + targetx)
        if "://www.chess.com/members/view/" not in browser.geturl():
            continue
        soup = BeautifulSoup(response)

        if membersinceyear != "" or lastloginyear != "":
            memsinlist = memsin(soup)

            if lastloginyear != "":
                lonln = memsinlist[1]
                if datetime(lonln[0], lonln[1], lonln[2]) < datetime(lastloginyear, lastloginmonth, lastloginday):
                    continue

        if timemax != "":
            if timeoutchecker(soup) > int(timemax):
                continue

        if membersinceyear != "":
            memsi = memsinlist[0]
            if datetime(memsi[0], memsi[1], memsi[2]) > datetime(membersinceyear, membersincemonth, membersinceday):
                continue

        if minrat != "" or maxrat != "":
            rating = onlratingchecker(soup)
            if minrat != "":
                minrat = int(minrat)
                if rating < minrat:
                    continue
            if maxrat != "":
                maxrat = int(maxrat)
                if rating > maxrat:
                    continue

        if maxgroup != "" or mingroup != "":
            groupcount = groupmemlister(soup)

            if maxgroup != "":
                if groupcount > int(maxgroup):
                    continue
            if mingroup != "":
                if groupcount < int(mingroup):
                    continue

        if youngeryear != "" or olderyear != "":
            birthdate = birthlister(soup)
            if birthdate == "":
                continue
            while "" in birthdate:
                birthdate.remove("")

            birthdate = [int(birthdate[2]), int(birthdate[0]), int(birthdate[1])]

            if youngeryear != "":
                if datetime(birthdate[0], birthdate[1], birthdate[2]) < datetime(youngeryear, youngermonth, youngerday):
                    continue
            if olderyear != "":
                if datetime(birthdate[0], birthdate[1], birthdate[2]) > datetime(olderyear, oldermonth, olderday):
                    continue

        if heritage != "":
            nation = nationlister(soup)

            if heritage not in nation:
                continue

        if memgender != "":
            name = namechecker(soup)
            if name == " ":
                continue
            name = name.split(" ")[0].lower()
            Found = "n"

            if memgender == "f":
                with open("namelists/female", "rb") as fnlist:
                    for line in fnlist:
                        if name in line:
                            Found = "y"
                            break
            elif memgender == "m":
                with open("namelists/male", "rb") as mnlist:
                    for line in mnlist:
                        if name in line:
                            Found = "y"
                            break
            if Found == "n":
                continue

        passmem.append(targetx)
    return passmem

def namechecker(soup):
    for placeholder in soup.find_all("strong"):
        strplaceholder = str(placeholder)
        if "Click here" not in strplaceholder and "ChessTV" not in strplaceholder:
            return str(placeholder.text)

def timeoutchecker(soup):
    for placeholder in soup.find_all(class_ = "even"):
        if "Timeouts:" in str(placeholder):
            timeout = int(placeholder.text.replace("Timeouts:", "").strip().replace("% (last 90 days)", ""))
            return timeout

def onlratingchecker(soup):
    onrating = 0
    for x in soup.find_all(class_ = "clearfix stats-header"):
        if "Online Chess" in str(x):
            onrating = int(x.text.replace("Online Chess", "").strip())
    return onrating

def memsin(soup):
    memsinlist = list()
    for placeholder in soup.find_all(class_ = "section-content section-content-2"):
        longnumlist = placeholder.text.strip().replace("  ", "").replace(",", "").replace("Member Since:", "").replace("Profile Views:", " ").replace("Last Login:", " ").replace("\n", "").replace("Jan", "01").replace("Feb", "02").replace("Mar", "03").replace("Apr", "04").replace("May", "05").replace("Jun", "06").replace("Jul", "07").replace("Aug", "08").replace("Sep", "09").replace("Oct", "10").replace("Nov", "11").replace("Dec", "12").split(" ")
    return [int(longnumlist[2]), int(longnumlist[0]), int(longnumlist[1])], [int(longnumlist[5]), int(longnumlist[3]), int(longnumlist[4])]

def groupmemlister(soup):
    groupcountlist = list()
    for placeholder in soup.find_all(class_ = "parenthesis-link"):
        memgroups = placeholder.text
    return int(memgroups)

def nationlister(soup):
    nationlist = list()
    for placeholder in soup.find_all(class_ = "bottom-12"):
        break
    return str(placeholder.text.strip())

def birthlister(soup):
    for placeholder in soup.find_all(class_ = "section-content section-content-2"):
        try:
            placeholder = [birth for birth in str(placeholder).split("\n") if "Birthday:" in birth][0]
            pos = placeholder.find("Birthday:")
            birthday = placeholder[pos + 19: pos + 31].replace(",", "").replace("Jan", "01").replace("Feb", "02").replace("Mar", "03").replace("Apr", "04").replace("May", "05").replace("Jun", "06").replace("Jul", "07").replace("Aug", "08").replace("Sep", "09").replace("Oct", "10").replace("Nov", "11").replace("Dec", "12").split(" ")
        except IndexError:
            birthday = ""
    return birthday

pathway = "y"
while pathway in (["y"]):
    flow = "5"
            
    if flow == "5":
        pathtm = ""
        while pathtm not in (["1", "2"]):
            pathtm = raw_input(" 1. Check all tm's for a group\n 2. Check a single tm\nYour choice: ")
        targetnameorg = raw_input("\n\n\nName of the group you wish to check: ")
        targetname = re.sub(r"[^a-z A-Z 0-9]","", targetnameorg)
        targetname = targetname.replace(" ", "-").lower()

        if pathtm == "1":
            targetnameorgf = targetnameorg
            pagelist = gettmlinks(targetname)
        elif pathtm == "2":
            pathtm = ""
            while pathtm not in (["1", "2"]):
                pathtm = raw_input("\n\n 1. Check the tm for results\n 2. Check match for members with a timeout-ratio above a specific value\nYour choice: ")
            pagelist = raw_input("team match id: ")
            targetnameorgf = "team match: " + pagelist + " ... "
            pagelist = (["http://www.chess.com/groups/team_match?id=" + pagelist])

        tmpar, tmtimeout, winssdic, losedic = tmparchecker(pagelist, targetname)

        if pathtm == "1":
            tmparcount = Counter(tmpar)
            tmtimeoutcount = Counter(tmtimeout)
            joined = {}
            membernamelist = list()

            outputfile = open(targetnameorgf + " " + strftime("%Y-%m-%d", gmtime()) + ".csv", "wb")
            csvwriter = csv.writer(outputfile, delimiter = " ", quoting=csv.QUOTE_MINIMAL)

            for pointer in set(tmparcount.keys())|set(winssdic.keys())|set(losedic.keys())|set(tmtimeoutcount.keys()):
                joined[pointer] = (float(tmparcount.get(pointer, 0))/10 + (float(tmparcount.get(pointer, 0))*2 - float(winssdic.get(pointer, 0)) - float(losedic.get(pointer, 0)))*5/4 + float(winssdic.get(pointer, 0)) - float(losedic.get(pointer, 0)) - tmtimeoutcount.get(pointer, 0)*3, tmparcount.get(pointer, 0), winssdic.get(pointer, 0), losedic.get(pointer, 0), tmtimeoutcount.get(pointer, 0))

            csvwriter.writerow(("Member name", "tm's participated in", "points won", "points lost", "ongoing games", "timeouts"))

            for key, value in sorted(joined.items(), key = itemgetter(1), reverse = True):
                csvwriter.writerow((key, value[1], value[2], value[3], value[1]*2 - value[2] - value[3], value[4]))

            choicetm = ""
            while choicetm not in (["y", "n"]):
                choicetm = raw_input("continue to remove those who dosn't fill your requirements? (y/n) ")

            if choicetm == "y":
                membernamelist = list()
                for key in joined:
                    membernamelist.append(key)

                passmembers = memberprocesser(membernamelist)
                joined2 = dict()
                membernamelist = list()
                for key in joined:
                    if key in passmembers:
                        joined2[key] = joined[key]

                csvwriter.writerow(("Member name (those who fill your requirements)", "tm's participated in", "points won", "points lost", "ongoing games", "timeouts"))

                for key, value in sorted(joined2.items(), key = itemgetter(1), reverse = True):

                    csvwriter.writerow((key, value[1], value[2], value[3], value[1]*2 - value[2] - value[3], value[4]))
            outputfile.close()

        elif pathtm == "2":
            maxtmrat = int(raw_input("\n\nGet members with a timeout-ratio above: ").replace("%", ""))
            browser = mechanize.Browser()
            browser.set_handle_equiv(True)
            browser.set_handle_redirect(True)
            browser.set_handle_gzip(True)
            browser.set_handle_referer(True)
            browser.set_handle_robots(False)
            browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
            deadbeatlist = list()
            for member in tmpar:
                print "checking " + member
                response = browser.open("http://www.chess.com/members/view/" + member)
                if "://www.chess.com/members/view/" not in browser.geturl():
                    continue
                soup = BeautifulSoup(response)
                if timeoutchecker(soup) > maxtmrat:
                    deadbeatlist.append(member)
            print "\n\n\nThe following members has a timeoutratio above " + str(maxtmrat) + "%: " + str(deadbeatlist).replace("'", "").replace("[", "").replace("]", "")
        
  pathway = raw_input("Run again? (y/n) ")
